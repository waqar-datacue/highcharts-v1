import React, { useState, useEffect, useMemo } from "react";
import { LineChart, Line, BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts";
import SaudiRiyalSymbol from '../SaudiRiyalSymbol';

type ChartType = "line" | "bar" | "pie" | "step" | "table";

interface ChartWidgetProps {
  id: string;
  data: any[];
  dataKey: string;
  nameKey?: string;
  initialChartType?: ChartType;
  isCurrency?: boolean;
}

const COLORS = ["#16423C", "#6A9C89", "#C4DAD2", "#E9EFEC"];

const ChartWidget: React.FC<ChartWidgetProps> = ({
  id,
  data,
  dataKey,
  nameKey = "name",
  initialChartType = "line",
  isCurrency = false
}) => {
  const [chartType, setChartType] = useState<ChartType>(initialChartType);
  const [isMounted, setIsMounted] = useState(false);
  
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsMounted(true);
    }, 100);
    return () => clearTimeout(timer);
  }, []);
  
  // Create a stable key for the chart based on data and type
  const chartKey = useMemo(() => 
    `${id}-${initialChartType}-${JSON.stringify(data[0]?.[dataKey] ?? '')}`,
    [id, initialChartType, data, dataKey]
  );
  
  // Common chart props
  const commonProps = {
    isAnimationActive: true,
    animationDuration: 1000,
    animationEasing: 'ease-out' as const
  };
  
  // Set chart type based on initialChartType
  useEffect(() => {
    setChartType(initialChartType);
  }, [initialChartType]);

  const CustomYAxisTick = ({ x, y, payload }: any) => {
    return (
      <g transform={`translate(${x},${y})`}>
        <text x={0} y={0} dy={4} textAnchor="end" fill="#666" fontSize={12}>
          {isCurrency ? (
            <tspan>
              <SaudiRiyalSymbol size={12} style={{ marginRight: 4 }} />
              {payload.value.toLocaleString()}
            </tspan>
          ) : (
            payload.value.toLocaleString()
          )}
        </text>
      </g>
    );
  };

  const formatTooltip = (value: number) => {
    if (isCurrency) {
      return (
        <div className="flex items-center">
          <SaudiRiyalSymbol size={12} style={{ marginRight: 4 }} />
          {value.toLocaleString()}
        </div>
      );
    }
    return value.toLocaleString();
  };

  if (!isMounted) {
    return <div className="w-full h-full flex items-center justify-center">Loading...</div>;
  }
  
  const renderChart = () => {
    switch (chartType) {
      case "line":
        return (
          <ResponsiveContainer width="100%" height="100%">
            <LineChart 
              data={data}
              margin={{ top: 5, right: 20, left: 10, bottom: 5 }}
              {...commonProps}
            >
              <CartesianGrid strokeDasharray="3 3" stroke="#E5E7EB" />
              <XAxis 
                dataKey={nameKey} 
                tick={{ fontSize: 12 }} 
                tickLine={{ stroke: '#E5E7EB' }}
                axisLine={{ stroke: '#E5E7EB' }}
              />
              <YAxis 
                tick={<CustomYAxisTick />}
                tickLine={{ stroke: '#E5E7EB' }}
                axisLine={{ stroke: '#E5E7EB' }}
              />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: 'white', 
                  border: '1px solid #E5E7EB',
                  borderRadius: '0.375rem',
                  fontSize: '0.875rem'
                }} 
                formatter={(value: number) => formatTooltip(value)}
                labelFormatter={(label) => `Week: ${label}`}
              />
              <Legend wrapperStyle={{ paddingTop: 10 }} />
              <Line 
                type="monotone" 
                dataKey={dataKey} 
                stroke="#16423C" 
                strokeWidth={2}
                activeDot={{ r: 6, fill: "#16423C" }} 
                isAnimationActive={true}
                animationDuration={1000}
                animationEasing="ease-out"
              />
            </LineChart>
          </ResponsiveContainer>
        );
      
      case "bar":
        return (
          <ResponsiveContainer width="100%" height="100%">
            <BarChart 
              data={data}
              margin={{ top: 5, right: 20, left: 10, bottom: 5 }}
              {...commonProps}
            >
              <CartesianGrid strokeDasharray="3 3" stroke="#E5E7EB" />
              <XAxis 
                dataKey={nameKey}
                tick={{ fontSize: 12 }}
                tickLine={{ stroke: '#E5E7EB' }}
                axisLine={{ stroke: '#E5E7EB' }}
              />
              <YAxis 
                tick={<CustomYAxisTick />}
                tickLine={{ stroke: '#E5E7EB' }}
                axisLine={{ stroke: '#E5E7EB' }}
              />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: 'white', 
                  border: '1px solid #E5E7EB',
                  borderRadius: '0.375rem',
                  fontSize: '0.875rem'
                }} 
                formatter={(value: number) => formatTooltip(value)}
                labelFormatter={(label) => `${label}`}
              />
              <Legend wrapperStyle={{ paddingTop: 10 }} />
              <Bar 
                dataKey={dataKey} 
                fill="#6A9C89" 
                radius={[4, 4, 0, 0]}
                isAnimationActive={true}
                animationDuration={1000}
                animationEasing="ease-out"
              />
            </BarChart>
          </ResponsiveContainer>
        );
      
      case "pie":
        return (
          <ResponsiveContainer width="100%" height="100%">
            <PieChart margin={{ top: 5, right: 20, left: 10, bottom: 5 }} {...commonProps}>
              <Pie
                data={data}
                cx="50%"
                cy="50%"
                innerRadius={50}
                outerRadius={80}
                fill="#8884d8"
                paddingAngle={2}
                dataKey={dataKey}
                nameKey={nameKey}
                label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                labelLine={false}
                isAnimationActive={true}
                animationDuration={1000}
                animationEasing="ease-out"
              >
                {data.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                ))}
              </Pie>
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: 'white', 
                  border: '1px solid #E5E7EB',
                  borderRadius: '0.375rem',
                  fontSize: '0.875rem'
                }} 
                formatter={(value: number) => formatTooltip(value)}
              />
              <Legend layout="horizontal" verticalAlign="bottom" align="center" />
            </PieChart>
          </ResponsiveContainer>
        );
      
      default:
        return null;
    }
  };

  return (
    <div className="h-full w-full">
      {renderChart()}
    </div>
  );
};

export default ChartWidget;
